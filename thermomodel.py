
N1 = 20 # кол-во промежутков на пластину
N2 = N1
t_end = 160 # окончание по времени

lamda1 = 48 # теплопроводности матереала А
lamda2 = 384 # теплопроводности матереала B

ro1 = 7800 # плотность матереала А
ro2 = 8800 # плотность матереала B

c1 = 460 # теплоемкость матереала А
c2 = 381 # теплоемкость матереала В

tl = 100 # температура на границе х = 0
tr = 50 # температура на границе х = L 
t0 = 10 # температура начальная

l = 0.3 # толщина пластина

# общее число узов:
N = N1 + N2 + 1

# расчетный шаг сетки по пространственной координате:
h = l / (N - 1)

# определяем коэфициент температуропроводности:
a1 = lamda1/(ro1 * c1)
a2 = lamda2/(ro2 * c2)

# определяем расчетный шаг сетки по времени:
tau = t_end / 100.0

# определяем поле температуры в начальный момент времени:
t = [None] * N
for i in range(N):
    t[i] = t0

# проводим интегрирование нестационарного уравнения теплопроводности
time = 0
alfa = [None] * N
beta = [None] * N
while time < t_end:
    time = time + tau

    # определяем начальные прогоночные коэфициэнты на основе левого граничного условия
    alfa[0] = 0.0
    beta[0] = tl
    
    # цикл с параметром для определения прогоночных коэфициентов по формуле 8 в первой части пластины
    for i in range(1, N1):
        # ai, bi, ci, fi коэфициент канонического представления СЛАУ с трехдиагональной матрицей
        ai = lamda1 / pow(h, 2)
        bi = 2.0 * lamda1 / pow(h, 2) + (ro1 * c1 / tau)
        ci = lamda1 / pow(h, 2)
        fi = (-ro1) * c1 * t[i] / tau

        # alfa[i], beta[i] – прогоночные коэффициенты
        alfa[i] = ai / (bi - ci * alfa[i-1])
        beta[i] = (ci * beta[i-1]-fi) / (bi -ci * alfa[i-1])

    #  определяем прогоночные коэффициенты на границе раздела двух
    # частей, используем соотношения (28)
    # print (n1)
    # al1 =  (2.0 * a1 * a2 * tau * lambda_2)
    # al2 =  2.0 * a1 * a2 * tau 
    # al3 = lambda_2 + (lambda_1  * (1-alfa[n1]))
    # al4 = (a1 * lambda_2) + (a2 *lambda_1)
    # alfa[n1 + 1] = al1 / ((al2 * al3) + (pow(h,2) * al4 ))
    
    # bt1 = 2.0 * a1 * a2 * tau * lambda_1 * beta[n1]
    # bt2 = (a1 * lambda_2) + (a2 *lambda_1)
    # bt3 = (pow(h,2) * bt2 * t[n1 + 1])
    # bt4 = 2.0 * a1 * a2 * tau
    # bt5 = lambda_2 + (lambda_1 * (1-alfa[n1]))
    # beta[n1 + 1] = (bt1 +  bt3) / ((bt4 * bt5) + (pow(h,2) * bt2))

    alfa[N1]=2.0*a1*a2*tau*lamda2/(2.0*a1*a2*tau*(lamda2+lamda1 
    *(1-alfa[N1-1]))+pow(h,2)*(a1*lamda2+a2*lamda1))
    beta[N1]=(2.0*a1*a2*tau*lamda1*beta[N1-1]+pow(h,2)*(a1*lamda2+a2 
    *lamda1)*t[N1])/(2.0*a1*a2*tau*(lamda2+lamda1 
    *(1-alfa[N1-1]))+pow(h,2)*(a1*lamda2+a2*lamda1))
    
    # цикл с параметром для определения прогоночных коэффициентов по
    # формуле (8) во второй части пластины
    for i in range(N1+1,N-1):
        # {ai, bi, ci, fi – коэффициенты канонического представления СЛАУ с
        # трехдиагональной матрицей
        ai = lamda2/pow(h,2);
        bi = 2.0*lamda2/pow(h,2)+ro2*c2/tau;
        ci = lamda2/pow(h,2);
        fi = -ro2*c2*t[i]/tau;
        # alfa[i], beta[i] – прогоночные коэффициенты
        alfa[i] = ai/(bi-ci*alfa[i-1]);
        beta[i] = (ci*beta[i-1]-fi)/(bi-ci*alfa[i-1]);

    # определяем значение температуры на правой границе
    t[N-1] = tr

    # используя соотношение (7) определяем неизвестное поле
    # температуры
    for i in range(N-2,-1,-1):
        t[i] = alfa[i] * t[i + 1] + beta[i]

for i in range(len(t)):
     print(" {:.8f} {:.5f}".format(h * (i), t[i]))